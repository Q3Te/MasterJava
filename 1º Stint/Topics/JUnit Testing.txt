Create a new maven project --> Select 1ยบ checkbox; Next --> Group Id - com.masterjava.testdrivendevelopment;  Artifact Id - (EX Nยบ) 		Name - MavenProject (Calcualdor)
------------------------------------------------------------------------------------------------------------------------------------------------------------
[pom.xml] - Dependancies go here
On maven repository ( Junit 5;   JUnit Jupiter API;     5.10.2 ) [ Copy the XML code into your "pom.xml" ]  

Under last item inside <project>; copy it into it 
[
  <dependencies>
  	<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
	<dependency>
	    <groupId>org.junit.jupiter</groupId>
	    <artifactId>junit-jupiter-api</artifactId>
	    <version>5.10.2</version>
	    <scope>test</scope>
	</dependency>
  </dependencies>
]
------------------------------------------------------------------------------------------------------------------------------------------------------------
In src/test/java;  make package (NAMING - com.masterjava.test) ;   Make "JUnit Test Case", name it as " XXXTest"
Run XXXTest as JUnitTest;	(#Failure Trace shows why it failed)	

IMPORTANT #* One has to run before doing anything and let it fail (RED) Irrespective of methods     {  	@Test  void test() {  fail("Not yet implemented");  }
@Test  void test() {}

  //Arrange - organizar [Define, Intialize Objects]					Xxx yyy = new Xxx();
  //Act - actuar, ejecutar	[Process them passing them via Class Methods]		dataType Name =yyy.methodName(Variables);
  //Assert - aseverar		[Test them]					assertEquals( expectedResultWhenMethodImplementsVariables, nameFromAct, marginError[+-] );

-assertEquals(message, expected, actual),   assertEquals(message, expected, actual, delta): 
- AssetTrue, AssertFalse, AssertNotEqual, AssertThrow
________________________________________________________________________________________________________
					ESSENTIALLY
Class Calculator

public class Calculator{
	public double sum(double n1, double n2) {
		return n1+n2;
	}
	
	public double rest(double n1, double n2) {
		return n1-n2;
	}

	@Test
	void sumarTest() {
		//Arrange
		Calculator calc = new Calculator();
		
		//Act
		double sumAction= calc.sum (2.5, 4.5);
		
		//Assert
		assertEquals(7.0,sumAction,1); 		//Action must give that answer but have a margin error of (-+1)
	}
	
	@Test
	void restarTest() {
		//Arrange
		Calculator calc = new Calculator();
		
		//Act
		double restAction= calc.rest(5.0, 2.4);
		
		//Assert
		assertEquals(2.6,restAction); 
	}